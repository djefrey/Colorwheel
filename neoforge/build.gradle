plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"
    // forgeRuntimeLibrary "org.anarres:jcpp:1.4.14"
    implementation "io.github.douira:glsl-transformer:2.0.1"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')

    localRuntime "dev.engine-room.flywheel:flywheel-neoforge-${minecraft_version}:${flywheel_version}"
    localRuntime "dev.engine-room.vanillin:vanillin-neoforge-${minecraft_version}:${vanillin_version}"

    localRuntime "maven.modrinth:iris:${iris_version}+${minecraft_version}-neoforge"
    localRuntime "maven.modrinth:sodium:mc${minecraft_version}-${sodium_version}-neoforge"

    modLocalRuntime("com.simibubi.create:create-${minecraft_version}:${create_neoforge_version}:slim") { transitive = false }
    modLocalRuntime("net.createmod.ponder:Ponder-NeoForge-${minecraft_version}:${ponder_version}")
    modLocalRuntime("com.tterrag.registrate:Registrate:${registrate_version}")
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
}
